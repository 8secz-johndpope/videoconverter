git clone https://github.com â€¦ /videoconverter.git
virtualenv videoconverter
cd videoconverter
cd bin
source activate
pip install boto3
cd ~/Documents/Python/videoconverter/lib/python3.7/site-packages
zip -r9 ~/Documents/Python/videoconverter/videoconverter_720p.zip .
zip -r9 ~/Documents/Python/videoconverter/videoconverter_1080p.zip .
deactivate
cd ~/Documents/Python/videoconverter
zip -g videoconverter_720p.zip videoconverter_720p.py
zip -g videoconverter_1080p.zip videoconverter_1080p.py

Create two lambda functions with a role that allows for access to SQS and Elastic Transcoder AWS services.
Create a lambda function called videoconverter_snspublish which will pass in an event with the S3 object name which has been uploaded. This will then send an SNS message with the object name to an SNS topic.
Upload zip file for each python script to each Lambda function.
Make sure lambda function Handler is 'videoconverter_720p.lambda_handler'
Set the environment variables.

Create bucket videoconverter-input, videoconverter-output-720p, videoconverter-output-1080p
Create an SNS topic called 'videoconverter-topic'. Add logging to SQS.
Enable raw message delivery for each subscriber on the SNS topic.
Create an event notification for SNS for the videoconverter-input bucket called 'videoconverter-upload', which sends an event on All object create events, for any file with a suffix of .mp4 and add SNS topic 'videoconverter-topic'
Create lambda execution role and add SQS and AmazonElasticTranscoder_JobsSubmitter managed permissions.



Create a video upload S3 bucket. Create two output buckets for 720p and for 1080p. Create an SNS topic. Create two SQS queues for each video quality. Create two Elastic Transcode pipelines to process the video in each video quality.
S3 upload triggers SNS message which is published to the topic when an object is uploaded with the .mp4 extension.
Subscribe both SQS queues to the one topic.
Allow S3 permission to publish message to SNS topic.
Each SQS queue invokes a job in an Elastic Transcoder pipeline for each video quality.
After each job has finished, the resulting converted video file is saved to the output S3 buckets.

When updating lambda function code, you can also use the CLI to help speed up the process.

aws lambda update-function-code \                                                   
    --function-name  videoconverter_1080p \
    --zip-file fileb://videoconverter_1080p.zip

aws configure set default.region us-east-1



